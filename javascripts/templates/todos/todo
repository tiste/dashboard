(function() { this.JST || (this.JST = {}); this.JST["templates/todos/todo"] = (function() {
    this.Skim = {
      access: function(name) {
        var value;
        value = this[name];
        if (typeof value === "function") {
          value = value.call(this);
        }
        if (value === true) {
          return [this];
        }
        if (value === false || (value == null)) {
          return false;
        }
        if (Object.prototype.toString.call(value) !== "[object Array]") {
          return [value];
        }
        if (value.length === 0) {
          return false;
        }
        return value;
      },
      withContext: function(context, block) {
        var create, flatten;
        create = function(o) {
          var F;
          F = function() {};
          F.prototype = o;
          return new F;
        };
        context = create(context);
        context.safe || (context.safe = this.safe || function(value) {
          var result;
          if (value != null ? value.skimSafe : void 0) {
            return value;
          }
          result = new String(value != null ? value : '');
          result.skimSafe = true;
          return result;
        });
        context.isArray = Array.isArray || function(value) {
          return {}.toString.call(value) === '[object Array]';
        };
        context.flatten = flatten = function(array) {
          var element, flattened, _i, _len;
          flattened = [];
          for (_i = 0, _len = array.length; _i < _len; _i++) {
            element = array[_i];
            if (element instanceof Array) {
              flattened = flattened.concat(flatten(element));
            } else {
              flattened.push(element);
            }
          }
          return flattened;
        };
        context.escape || (context.escape = this.escape || function(string) {
          if (string == null) {
            return '';
          }
          if (string.skimSafe || !/[&<>\"]/.test(string)) {
            return string;
          }
          return this.safe('' + string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
        });
        return block.call(context);
      }
    };
  
    return function(context) {
      if (context == null) {
        context = {};
      }
      return Skim.withContext.call({}, context, function() {
        var _buf, _skim_codeattributes1;
        _buf = '';
        _buf += "<div class=\"m-todo--show\"><form><div class=\"form-group\"><div class=\"m-todo--title pos-relative\"><div class=\"container-fluid phn\"><div class=\"row\"><div class=\"col-md-11\">";
        _buf += this.escape(this.title);
        _buf += "</div></div></div><div class=\"m-todo--done pos-absolute clickable pull-right\" data-intro=\"Marquez comme terminÃ©\" data-position=\"bottom\"><div class=\"h3 glyphicon glyphicon-ok mtm mlm\"></div></div></div></div></form></div><form><div class=\"form-group pos-relative\"><input class=\"m-todo--edit form-control input-lg\" type=\"text\"";
        _skim_codeattributes1 = this.title;
        switch (_skim_codeattributes1) {
          case true:
            _buf += " value=\"value\"";
            break;
          case false:
          case null:
            break;
          default:
            _buf += " value=\"";
            _buf += this.escape(_skim_codeattributes1);
            _buf += "\"";
        }
        _buf += " /><div class=\"m-todo--destroy pos-absolute clickable pull-right\"><div class=\"h3 glyphicon glyphicon-trash mtm mlm\"></div></div></div></form>";
        return _buf;
      });
    };
  
  }).call(this);;
}).call(this);
