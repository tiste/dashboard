(function() { this.JST || (this.JST = {}); this.JST["templates/settings/settings"] = (function() {
    this.Skim = {
      access: function(name) {
        var value;
        value = this[name];
        if (typeof value === "function") {
          value = value.call(this);
        }
        if (value === true) {
          return [this];
        }
        if (value === false || (value == null)) {
          return false;
        }
        if (Object.prototype.toString.call(value) !== "[object Array]") {
          return [value];
        }
        if (value.length === 0) {
          return false;
        }
        return value;
      },
      withContext: function(context, block) {
        var create, flatten;
        create = function(o) {
          var F;
          F = function() {};
          F.prototype = o;
          return new F;
        };
        context = create(context);
        context.safe || (context.safe = this.safe || function(value) {
          var result;
          if (value != null ? value.skimSafe : void 0) {
            return value;
          }
          result = new String(value != null ? value : '');
          result.skimSafe = true;
          return result;
        });
        context.isArray = Array.isArray || function(value) {
          return {}.toString.call(value) === '[object Array]';
        };
        context.flatten = flatten = function(array) {
          var element, flattened, _i, _len;
          flattened = [];
          for (_i = 0, _len = array.length; _i < _len; _i++) {
            element = array[_i];
            if (element instanceof Array) {
              flattened = flattened.concat(flatten(element));
            } else {
              flattened.push(element);
            }
          }
          return flattened;
        };
        context.escape || (context.escape = this.escape || function(string) {
          if (string == null) {
            return '';
          }
          if (string.skimSafe || !/[&<>\"]/.test(string)) {
            return string;
          }
          return this.safe('' + string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
        });
        return block.call(context);
      }
    };
  
    return function(context) {
      if (context == null) {
        context = {};
      }
      return Skim.withContext.call({}, context, function() {
        var item, _buf, _i, _j, _len, _len1, _ref, _ref1, _skim_codeattributes1, _skim_codeattributes2, _skim_codeattributes3;
        _buf = '';
        $('body').css({
          'background-image': 'url(' + this.background + ')'
        });
        _buf += "<div class=\"m-settings--icon pos-absolute clickable\"><i class=\"h1 mbn mrx glyphicon glyphicon-wrench\"></i></div><div class=\"m-overlay--settings transparent ";
        _skim_codeattributes1 = shuffleColor();
        if (this.isArray(_skim_codeattributes1)) {
          _skim_codeattributes1 = this.flatten(_skim_codeattributes1);
          for (_i = 0, _len = _skim_codeattributes1.length; _i < _len; _i++) {
            item = _skim_codeattributes1[_i];
            if (item) {
              _skim_codeattributes1 = item.toString();
            }
          }
          for (_j = 0, _len1 = _skim_codeattributes1.length; _j < _len1; _j++) {
            item = _skim_codeattributes1[_j];
            if (item.length > 0) {
              _skim_codeattributes1 = item;
            }
          }
          _buf += this.escape(_skim_codeattributes1.join(" "));
        } else {
          _buf += this.escape(_skim_codeattributes1);
        }
        _buf += "\"><form class=\"pos-absolute-center\"><div class=\"form-group\"><label class=\"h2\" for=\"m-settings--background\">Votre plus belle photo de voyage</label><div class=\"input-group\"><input class=\"form-control input-lg m-settings--background\" id=\"m-settings--background\" type=\"file\" /><span class=\"input-group-btn\"><button class=\"btn btn-danger btn-lg m-settings--background--cancel\" type=\"button\">&times;</button></span></div></div><div class=\"form-group\"><label class=\"h2\" for=\"m-settings--lang\">Langue</label><select class=\"form-control m-settings--lang\" id=\"m-settings--lang\"><option";
        _skim_codeattributes2 = (_ref = this.lang === 'fr') != null ? _ref : {
          'selected': false
        };
        switch (_skim_codeattributes2) {
          case true:
            _buf += " selected=\"selected\"";
            break;
          case false:
          case null:
            break;
          default:
            _buf += " selected=\"";
            _buf += this.escape(_skim_codeattributes2);
            _buf += "\"";
        }
        _buf += " value=\"fr\">Fran√ßais</option><option";
        _skim_codeattributes3 = (_ref1 = this.lang === 'en') != null ? _ref1 : {
          'selected': false
        };
        switch (_skim_codeattributes3) {
          case true:
            _buf += " selected=\"selected\"";
            break;
          case false:
          case null:
            break;
          default:
            _buf += " selected=\"";
            _buf += this.escape(_skim_codeattributes3);
            _buf += "\"";
        }
        _buf += " value=\"en\">English</option></select></div></form></div>";
        return _buf;
      });
    };
  
  }).call(this);;
}).call(this);
